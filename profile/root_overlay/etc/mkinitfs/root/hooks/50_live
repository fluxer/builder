#!/bin/sh

source "/etc/live.conf"

boot_mnt="/live/boot"
ro_branch="/live/ro"
rw_branch="/live/rw"
newroot="/newroot"
mkdir -p "${boot_mnt}" "${ro_branch}" "${rw_branch}" "${newroot}"

#==================================== Base functions ====================================#

## Modprobe modules
mods() {
    local mod

    # Load Kernel modules to make sure filesystem can be handled
    msg "Loading necessary modules"
    for mod in ${LIVE_MODPROBE};do
        # handle built-ins gracefully
        if ! grep -q "$mod.ko" "/lib/modules/$(uname -r)/modules.builtin" ;then
            cmd modprobe -b "$mod"
        fi
    done
}

## Mount the boot device containing the neccesary files
boot() {
    local probedev_list skipdev_list dev sf skip

    # Sleep to wait for the devices to show up
    while [ "${LIVE_WAIT}" -gt "0" ];do
        # Add default LIVE_BOOT_DEV, if it is valid block device
        if [ -b "${LIVE_BOOT_DEV}" ];then
            probedev_list="${LIVE_BOOT_DEV}"
        fi

        # Add all removable devices (USB/CD/DVD/whatever)
        for sf in /sys/block/*;do
            if [ "$(cat ${sf}/removable)" = "1" ];then
                probedev_list="${probedev_list} /dev/${sf##*/}"
            fi
        done

        # Probe all devices from the list
        for dev in ${probedev_list};do
            # Skip already checked devices
            skip="no"
            for sdev in ${skipdev_list};do
                if [ "${dev}" = "${sdev}" ];then
                    skip="yes"
                fi
            done
            [ "${skip}" = "yes" ] && continue

            # Skip devices without filesystem
            # NOTE: blkid from Busybox does not support this, it just dumps
            # all the information which works kinda OK
            if [ -z "$(blkid -o value -s TYPE ${dev})" ];then
                continue
            fi

            msg "Mounting device: ${dev}"
            cmd mount -o ro "${dev}" "${boot_mnt}"

            if [ -f "${boot_mnt}/${LIVE_ROOT_SFS}" ];then
                LIVE_BOOT_DEV="${dev}"
                break 2
            else
                msg "Unmounting device: ${dev}"
                cmd umount -fl "${dev}"
                # Don't check the same devices again
                skipdev_list="${skipdev_list} ${dev}"
            fi
        done

        sleep 1
        let LIVE_WAIT-=1
    done

    if [ ! -b "${LIVE_BOOT_DEV}" ];then
        error "Unable to find the boot device, if you can mount it"
        error "at ${boot_mnt} and exit the shell to continue"
        rescue_shell
    fi
}

## Create a temporary filesystem for read-write branch
tmpfs() {
    msg "Mounting tmpfs filesystem"
    cmd mount -t tmpfs -o size="${LIVE_TMPFS_SIZE}" tmpfs "${rw_branch}"
    cmd mkdir -p "${rw_branch}/write" "${rw_branch}/work"
}

## Mount the SquashFS image on read-only branch
sfs() {
    if [ "${LIVE_COPY2RAM}" = "0" ];then
        msg "Mounting the root SquashFS image"
        cmd mount -o ro -t squashfs "${boot_mnt}/${LIVE_ROOT_SFS}" "${ro_branch}"
    fi
}

## Boot with filesystem to RAM
c2r() {
    [ "${LIVE_COPY2RAM}" = "1" ] || return

    # Check if the system has enough RAM, if not force off
    msg "Comparing the system RAM against the root size"
    if [ "$(cat ${boot_mnt}/live/root.size)" -gt "$(df ${rw_branch} | awk '{print $2}' | tail -n1)" ];then
        error "System does not have enough RAM to support Copy2RAM"
        LIVE_COPY2RAM="0"
        sfs
        return
    fi

    # Unsquash SquashFS image to RAM
    msg "Transfering files to RAM, this may take a while..."
    cmd unsquashfs -f -fr 8 -da 8 -d "${rw_branch}/write" "${boot_mnt}/${LIVE_ROOT_SFS}"
    msg "Unmounting the boot device"
    cmd umount -fl "${boot_mnt}"
}

## Merge read and write branches into one Union read-write filesystem
union() {
    [ "${LIVE_COPY2RAM}" = "0" ] || return

    msg "Merging layers as union filesystem"
    cmd mount -t overlay -o lowerdir="${ro_branch}",upperdir="${rw_branch}/write",workdir="${rw_branch}/work" overlay "${newroot}"
}


## Move mounted branches to the new root directory
move() {
    # Move-mount only the tmpfs if Copy2RAM was asigned as everything is stored there
    if [ "${LIVE_COPY2RAM}" = "1" ];then
        msg "Moving tmpfs to new root"
        cmd mount --bind "${rw_branch}/write" "${newroot}"
    # Else move-mount all braches and the boot device so that they are registered as mounted
    else
        mkdir -p "${newroot}${boot_mnt}" "${newroot}${ro_branch}" "${newroot}${rw_branch}"
        msg "Moving boot device"
        cmd mount --move "${boot_mnt}" "${newroot}${boot_mnt}"
        msg "Moving read-only branch"
        cmd mount --move "${ro_branch}" "${newroot}${ro_branch}"
        msg "Moving read-write branch"
        cmd mount --move "${rw_branch}" "${newroot}${rw_branch}"
    fi

    # Store boot device
    mkdir -p "${newroot}/live"
    echo "${LIVE_BOOT_DEV}" > "${newroot}/live/boot_device"
}


#================================== Main handler ==================================#

## Main function which executes all others on demand
# Parse /proc/cmdline and override variables
for arg in $(cat /proc/cmdline);do
    case "${arg}" in
        live_func=*) LIVE_FUNC="${arg##*=}" ;;
        live_modprobe=*) LIVE_MODPROBE="${arg##*=}" ;;
        live_boot_dev=*) LIVE_BOOT_DEV="${arg##*=}" ;;
        live_wait=*) LIVE_WAIT="${arg##*=}" ;;
        live_root_sfs=*) LIVE_ROOT_SFS="${arg##*=}" ;;
        live_tmpfs_size=*) LIVE_TMPFS_SIZE="${arg##*=}" ;;
        live_copy2ram=[0-1]) LIVE_COPY2RAM="${arg##*=}" ;;
    esac
done

# Fix the variables, spaces in kernel arguments are not allowed
LIVE_FUNC="${LIVE_FUNC//,/ }"
LIVE_MODPROBE="${LIVE_MODPROBE//,/ }"

# Run functions that were assigned
for f in ${LIVE_FUNC};do
    case "${f}" in
        # provide meta functions
        shell) rescue_shell ;; # allows to break in-between actions
        *) ${f} ;;
    esac
done
