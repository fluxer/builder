#!/bin/bash

set -e

#========================== Helper functions ==========================#

# set colors if supported
if [ -t 0 ];then
    C_BLACK='\e[1;30m'
    C_RED='\e[1;31m'
    C_GREEN='\e[1;32m'
    C_YELLOW='\e[1;33m'
    C_BLUE='\e[1;34m'
    C_PURPLE='\e[1;35m'
    C_CYAN='\e[1;36m'
    C_WHITE='\e[1;37m'
    C_CLEAR='\e[m'
fi

# usefull functions
Msg() {
    echo -e " ${C_BLUE}*${C_CLEAR} ${@}"
}

Warn() {
    echo -e " ${C_YELLOW}*${C_CLEAR} ${@}"
}

Error() {
    echo -e " ${C_RED}*${C_CLEAR} ${@}"
    exit 1
}

TMPDIR=""
NOCLEAN=""
Cleanup() {
    if [ -n "$TMPDIR" ];then
        if [ -z "$NOCLEAN" ];then
            Msg "Removing temporary directory"
            rm -rf "$TMPDIR"
        else
            Msg "Temporary directory is: $TMPDIR"
        fi
    fi
}

Usage () {
echo "
 lsinitfs v1.0.3 - initial RAM filesystem image lister

  Usage: '# ${0##*/} <option> [<option>]..'

  Options:

     -k|--kernel=[VERSION|auto]   Kernel version to work with (autodetected)
     -b|--busybox=[PATH]          Path to Busybox (autodetected)
     -n|--noclean                 Do not remove the temporary files

  NOTE: by default the kernel version that the system is currently using is
        going to be used for the image, if set to "auto" the most recent
        kernel found will be used instead, usefull in chroot for an example.
"
    exit 2
}

#============== Arguments handler and requirements checker ==============#

KERNEL="$(uname -r)"
MODULES="auto"
BUSYBOX="$(type -p busybox)"
for arg in "$@";do
    case "$arg" in
        -k=*|--kernel=*) KERNEL="${arg#*=}";;
        -b=*|--busybox=*) BUSYBOX="${arg#*=}";;
        -n|--noclean) NOCLEAN="yes" ;;
        *) Error "Unknown argument: $arg"; Usage ;;
    esac
done

if [ -z "$KERNEL" ];then
    Error "Kernel release is invalid: $KERNEL"
fi

if [ -z "$BUSYBOX" ] || [ ! -f "$BUSYBOX" ];then
    Error "Busybox is not found: $BUSYBOX"
fi

#============================ Image lister ============================#

IMAGE="/boot/initramfs-$KERNEL.img"

Msg "Searching for kernel modules directory"
for kdir in '/lib/modules' '/lib32/modules' '/lib64/modules' \
        '/usr/lib/modules' '/usr/lib32/modules' '/usr/lib64/modules';do
    if [ "$KERNEL" == "auto" ] && [ -d "$kdir" ];then
        autodetected="$("$BUSYBOX" find "$kdir" -name 'modules.symbols' | "$BUSYBOX" sort | "$BUSYBOX" head -n1)"
        if [ -n "$autodetected" ];then
            KERNEL="$("$BUSYBOX" basename $("$BUSYBOX" dirname "$autodetected"))"
            MODULESDIR="$kdir/$KERNEL"
            IMAGE="/boot/initramfs-$KERNEL.img"
            break
        fi
    elif [ -d "$kdir/$KERNEL" ];then
        MODULESDIR="$kdir/$KERNEL"
        break
    fi
done

if [ "$KERNEL" == "auto" ];then
    Error "Kernel release could not be detected"
elif [ -z "$MODULESDIR" ];then
    Error "Kernel release is invalid: $KERNEL"
fi

trap Cleanup EXIT
TMPDIR="$("$BUSYBOX" mktemp -d)"

Msg "Listing image: $IMAGE"
(cd "$TMPDIR" && "$BUSYBOX" gunzip -c "$IMAGE" | "$BUSYBOX" cpio -t -v)
